# Requirements and Setup for the Mental Health Chatbot Project

## Overview

This project implements an emotion-aware mental health chatbot that integrates:
- An **Emotion Classifier** based on a fine-tuned `SamLowe/roberta-base-go_emotions` model for multi-label emotion detection.
- Two **T5 Models**:
  - One for generating supportive, therapist-style responses.
  - One for handling factual question-answering (QA).
- A unified pipeline that routes user inputs to the appropriate model based on detected emotions.
- An interactive **Gradio Interface** that supports both text and voice inputs, along with additional features such as language selection and conversation logging.

## Python Version

- **Python 3.10** or higher is recommended.

## Dependencies

The project requires several Python libraries. Below is a list of required packages and tools:

### Standard Libraries
- `os`, `glob`, `json`, `time`, `random`, `itertools`, `tempfile`, `datetime`, `logging`, `warnings`, `pathlib`, `dataclasses`, `pprint`

### Scientific & Data Libraries
- **numpy**
- **pandas**
- **scikit-learn** (for metrics and preprocessing, e.g., `f1_score`, `MultiLabelBinarizer`)

### Deep Learning & PyTorch
- **torch**

### Audio Processing
- **pydub**
- **speech_recognition**
  - *Note*: `pydub` requires `ffmpeg` installed on your system. For example, on Ubuntu:  
    ```bash
    sudo apt-get install ffmpeg
    ```

### Hugging Face Ecosystem
- **transformers**
- **datasets**
- **evaluate**

### Web Interface
- **gradio**

### Installation Example

You can install most of these packages using pip:

```bash
pip install numpy pandas scikit-learn torch pydub SpeechRecognition transformers datasets evaluate gradio

----------------

# ================================
# Standard Library Imports
# ================================
import os
import glob
import json
import time
import random
import itertools
import tempfile
import datetime
import logging
import warnings
from pathlib import Path
from dataclasses import dataclass
import pprint  # for pretty-printing outputs

# ================================
# Scientific & Data Libraries
# ================================
import numpy as np
import pandas as pd
import torch
import torch.nn.functional as F
from sklearn.metrics import f1_score
from sklearn.preprocessing import MultiLabelBinarizer

# ================================
# Audio Processing
# ================================
from pydub import AudioSegment
import speech_recognition as sr

# ================================
# NLP & Transformers (Hugging Face)
# ================================
from datasets import load_dataset, Dataset, concatenate_datasets
import evaluate
import gradio as gr

# Tokenizers and Models
from transformers import (
    AutoTokenizer,
    AutoModelForSequenceClassification,
    T5ForConditionalGeneration,
)

# Training Tools
from transformers import (
    Trainer,
    TrainingArguments,
    Seq2SeqTrainer,
    Seq2SeqTrainingArguments,
    TrainerCallback,
    DataCollatorWithPadding,
    DataCollatorForSeq2Seq,
    default_data_collator,
)

# Logging
from transformers import logging as hf_logging

# Other
import math
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from torch.utils.data import DataLoader